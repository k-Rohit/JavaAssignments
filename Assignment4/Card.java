package Assignment4_;

import AbstractClasses.Car;

import java.util.*;
import java.util.stream.IntStream;

public class Card {
    Scanner scanner =  new Scanner(System.in);
    public static final String[] suits = {"Heart","Diamond","Spade","Club"};
    public static final String[] ranks = {"Ace","1","2","3","4","5","6","7","8","9","Jack","Queen","King"};
    Vector<Card> deck= new Vector<>(52);

    private String suit;
    private String rank;


    // Empty Constructor
    public Card(){

    }

    // Parameterized constructor
    public Card(String suit, String rank){
        this.suit = suit;
        this.rank = rank;
    }

    // This function creates a particular card taking the name of the suit and the rank of the card
    public Card createCard(){
        System.out.println("Enter the suit of the card");
        String suit = scanner.next();
        System.out.println("Enter the rank of the card");
        String rank = scanner.next();
        Card card =  new Card(suit,rank);
        return card;
    }

    // Getter methods for accessing the private variables
    public String getSuit() {
        return suit;
    }

    public String getRank() {
        return rank;
    }

    // This function creates a vector of  card objects containing the suit and the rank of the card
    // For every suit in the deck we create cards of all the 13 ranks and then add to the vector
    public Vector<Card> createDeck(){


        for(String suit : Card.suits){
            for(String rank : Card.ranks){
                Card card = new Card(suit,rank);
                deck.add(card);
            }
        }
        return deck;
    }

    // This function displays the whole deck and prints the whole deck
    public void displayDeck(Vector<Card> deck){
        for(int i=0; i<=51; i++){
            System.out.println(deck.get(i).getRank() + "   " + deck.get(i).getSuit() + "\n");
        }
    }

    // Function to print the card. This function takes the rank and the suit of the card and
    // prints the card
    public void printCard(Vector<Card> deck){
        System.out.println("Enter the rank and suit of the card to be printed");
        String rank = scanner.next();
        String suit = scanner.next();
        for(int i=0; i<=51; i++){
            if((Objects.equals(deck.get(i).getRank(), rank)) && (Objects.equals(deck.get(i).getSuit(), suit))){
                System.out.println(deck.get(i).getRank() + " " + deck.get(i).getSuit());
            }
        }
    }


    // Function to check whether two cards are from the same suit or not
    // This function takes two indexes with generated by a random number .
    // Using the getter method it picks up a random card and checks whether the suit of the card is equal or not
    public void sameCard(Vector<Card> deck)
    {
        Random random = new Random();
        int firstCardIndex = random.nextInt(52);
        int secondCardIndex = random.nextInt(52);

        if(Objects.equals(deck.get(firstCardIndex).getSuit(), deck.get(secondCardIndex).getSuit())){
            System.out.println("Card 1 and Card 2 are from the same suit");
        }
        else {
            System.out.println("Card 1 and Card 2 are from the same suit");
        }
    }

    // This function is same as the sameCard function.
    // The only difference being that this checks for the rank of the two cards
    public void compareCard(Vector<Card> deck){
        Random random = new Random();
        int firstCardIndex = random.nextInt(52);
        int secondCardIndex = random.nextInt(52);

        if(Objects.equals(deck.get(firstCardIndex).getRank(), deck.get(secondCardIndex).getRank())){
            System.out.println("Card 1 and Card 2 have the same rank");
        }
        else{
            System.out.println("Card 1 and Card 2 don't have the same rank");
        }
    }

    // This function finds a card of a particular suit and rank
    // If the card exists then is notifies accordingly
    public void findCard(Vector<Card> deck){
        System.out.println("Enter the rank and suit of the card to be searched");
        String rank = scanner.next();
        String suit = scanner.next();
        for(int i=1; i<=51; i++){
            if((Objects.equals(deck.get(i).getRank(), rank)) && (Objects.equals(deck.get(i).getSuit(), suit))){
                System.out.println("Card exists");
            }
            else{
                System.out.println("Card doesn't exists");
            }
        }
    }

    // This function picks up any 5 random cards from each suite
    // A random Integer array of size 5 has been created in which the values can range from 0-52
    // Then using the getter method the cards are printed
    public void dealCard(Vector<Card> deck){
        int[]  randomIntsArray = IntStream.generate(() -> new Random().nextInt(5)).limit(52).toArray();
        for(int i=0; i<randomIntsArray.length;i++ ){
            System.out.println(deck.get(i).getRank() + " " + deck.get(i).getSuit());
        }
    }

    // This is function that uses inbuilt shuffle function of the Collection frame work in java to shuffle the
    // whole deck
    public void shuffleDeck(Vector<Card> deck){
        Collections.shuffle(deck);
    }


    // This function clears the deck or removes all the cards from the vector
    public void clearDeck(Vector<Card> deck){
        deck.clear();
    }

    // This function checks if the Vector deck is empty or not
    public void isEmpty(Vector<Card> deck) {
        if (deck.isEmpty()) {
            System.out.println("The deck is empty");
        }
    }

}
